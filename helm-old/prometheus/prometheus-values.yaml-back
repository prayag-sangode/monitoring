rbac:
  create: true

server:
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      kubernetes.io/ingress.class: nginx
      #nginx.ingress.kubernetes.io/auth-type: "basic"
      #nginx.ingress.kubernetes.io/auth-secret: "ai-foundation-htpasswd"
      #nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"        
    hosts:
      - prometheus.example.com
    tls:
      - secretName: prometheus-tls
        hosts:
          - prometheus.example.com
    
  persistentVolume:
    enabled: true
    statefulSetNameOverride: ""
    accessModes:
      - ReadWriteOnce
    labels: {}
    annotations: {}
    existingClaim: ""
    mountPath: /data
    size: 2Gi
    storageClass: "standard"
    #storageClass: "csi-disk"
    subPath: ""

  emptyDir:
    sizeLimit: ""

  alertmanagers: []

  statefulSet:
    enabled: false
  startupProbe:
    enabled: false

serverFiles:
  alerting_rules.yml:
    groups:
      - name: test
        rules:
          - alert: TestAlert
            expr: vector(1)
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Test alert is firing."  
              description: "This is a test alert."
      - name: kubernetes-pods
        rules:
          - alert: PodDown
            expr: up == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Pod {{ $labels.pod }} is down"
              description: "The pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is down."

          - alert: ContainerCreatingFor5Minutes
            expr: |
              max by (namespace, pod) (
                kube_pod_status_phase{phase!="Running"}
              ) > 0
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "Pod '{{ $labels.pod }}' in namespace '{{ $labels.namespace }}' is in a non-'Running' state for more than 5 minutes."
              description: "The pod '{{ $labels.pod }}' in namespace '{{ $labels.namespace }}' has been in a non-'Running' state for more than 5 minutes."

          - alert: PodHighCpuUsage
            expr: sum(rate(container_cpu_usage_seconds_total{job="kubelet", container_name!="POD"}[1m])) by (pod) > 1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage in pod {{ $labels.pod }}"
              description: "The pod {{ $labels.pod }} in namespace {{ $labels.namespace }} has high CPU usage."

          - alert: PodHighMemoryUsage
            expr: sum(container_memory_usage_bytes{job="kubelet", container_name!="POD"}) by (pod) / sum(machine_memory_bytes) by (node) > 0.8
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage in pod {{ $labels.pod }}"
              description: "The pod {{ $labels.pod }} in namespace {{ $labels.namespace }} has high memory usage."

  recording_rules.yml: {}
  rules: {}

  prometheus.yml:
    rule_files:
      - /etc/config/recording_rules.yml
      - /etc/config/alerting_rules.yml
      - /etc/config/rules
      - /etc/config/alerts

    # Alertmanager configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets: ['alertmanager.monitoring.svc.cluster.local:9093']        

    scrape_configs:
      - job_name: prometheus
        static_configs:
          - targets:
            - localhost:9090

      - job_name: alertmanager
        static_configs:
          - targets:
            - alertmanager.monitoring.svc.cluster.local:9093
              
      - job_name: aifs-api-gateway
        static_configs:
          - targets:
            - aifs-api-gateway.monitoring.svc.cluster.local

      - job_name: 'custom-pushgateway-service'
        honor_timestamps: true
        scrape_interval: 5s
        scrape_timeout: 4s
        metrics_path: /metrics
        scheme: http
        static_configs:
          - targets:
              - custom-metric-pushgateway.default.svc.cluster.local              

      - job_name: postgresql
        metrics_path: /metrics
        scrape_interval: 10s
        static_configs:
        - targets:
           - postgres-exporter-prometheus-postgres-exporter.monitoring.svc.cluster.local          

alertmanager:
  enabled: false

kube-state-metrics:
  enabled: true

prometheus-node-exporter:
  enabled: false

prometheus-pushgateway:
  enabled: true

  serviceAnnotations:
    prometheus.io/probe: pushgateway
      
